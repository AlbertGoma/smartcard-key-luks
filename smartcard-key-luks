#!/bin/bash

# Copyright (c) 2019 Purism SPC

PUBKEY=$1
GNUPGHOME="/etc/cryptsetup-initramfs"

if [ ! -e "$PUBKEY" ]; then
  echo "ERROR: This script requires a GPG public key to encrypt your LUKS secret against"
  echo "Usage: $0 <gpg_public_key.asc>"
  exit 1
fi

# Discover the root LUKS device
ROOT_LUKS=`grep ' / ' /etc/fstab | cut -f1 -d ' '| sed 's/\/dev\/mapper\///'`
ROOT_DEV=` grep $ROOT_LUKS /etc/crypttab | tail -n1 | cut -f2 -d ' '`
if echo $ROOT_DEV | grep -q 'UUID'; then
  UUID=`echo $ROOT_DEV | cut -f2 -d '='`
  ROOT_DEV_FULL="/dev/disk/by-uuid/$UUID"
fi

if [ ! -e "$ROOT_DEV_FULL" ]; then
  echo No valid root device found! Aborting!
  exit 1
fi

if dpkg -l scdaemon | egrep -q '^ii'; then
  echo "scdaemon installed"
else
  echo "ERROR: scdaemon package not installed. The scdaemon package is required to access the OpenPGP smart card"
  exit 1
fi
  
chmod 700 $GNUPGHOME
# create cryptfs GPG home dir
gpg --homedir ${GNUPGHOME} --card-status
if [ $? -ne 0 ]; then
  echo Insert your OpenPGP smart card and press Enter
  read
  gpg --homedir ${GNUPGHOME} --card-status || exit 1
fi

gpg --homedir ${GNUPGHOME} --import $PUBKEY
gpg --homedir ${GNUPGHOME} --export --export-options export-minimal --armor > ${GNUPGHOME}/pubring.gpg
GPG_RECIPIENT=`gpg --homedir ${GNUPGHOME} --card-status --with-colons | grep '^fpr:' | cut -f2 -d':'`
echo -e "5\ny\n" | gpg --homedir ${GNUPGHOME} --command-fd 0 --expert --edit-key $GPG_RECIPIENT trust

# Generate the LUKS key if it doesn't exist
if [ -e "${GNUPGHOME}/cryptkey.gpg" ]; then
  echo "${GNUPGHOME}/cryptkey.gpg exists, skipping key generation"
else
# generate secret key
  dd if=/dev/random bs=1 count=256 >/root/tmpkey
  gpg --homedir ${GNUPGHOME} -o ${GNUPGHOME}/cryptkey.gpg -r $GPG_RECIPIENT --yes --encrypt /root/tmpkey
  if [ $? -ne 0 ]; then
    echo "Encryption of ${GNUPGHOME}/cryptkey.gpg failed! Aborting!"
    exit 1
  fi
  
  # test decryption
  GNUPGHOME=$GNUPGHOME /lib/cryptsetup/scripts/decrypt_gnupg-sc ${GNUPGHOME}/cryptkey.gpg > /dev/null
  
  if [ $? -ne 0 ]; then
    echo "Decryption test for ${GNUPGHOME}/cryptkey.gpg failed! Aborting!"
    exit 1
  fi
  
  echo -e "\n\nAdding your new secret key to LUKS using any existing passphrase."
  cryptsetup luksAddKey $ROOT_DEV_FULL /root/tmpkey
  shred -u /root/tmpkey
fi

if egrep -q "^$ROOT_LUKS $ROOT_DEV $GNUPGHOME/cryptkey.gpg luks,keyscript=decrypt_gnupg-sc" /etc/crypttab; then
  echo "/etc/crypttab already updated, skipping"
else
  perl -pi -e "s|^$ROOT_LUKS .*|$ROOT_LUKS $ROOT_DEV $GNUPGHOME/cryptkey.gpg luks,keyscript=decrypt_gnupg-sc|" /etc/crypttab
  update-initramfs -u
fi

# patch grub config files
perl -pi -e 's/^GRUB_CMDLINE_LINUX_DEFAULT=(.*) splash/GRUB_CMDLINE_LINUX_DEFAULT=\1 nosplash noresume loglevel=3/' /etc/default/grub
echo "GRUB_CMDLINE_LINUX_RECOVERY=\"cryptopts=target=$ROOT_LUKS,source=$ROOT_DEV,luks\"" >> /etc/default/grub

# temporary script patches until they are upstreamed
perl -pi -e 's/GRUB_CMDLINE_LINUX_RECOVERY=recovery/GRUB_CMDLINE_LINUX_RECOVERY=\"\$GRUB_CMDLINE_LINUX_RECOVERY recovery\"/' /etc/grub.d/10_linux
perl -pi -e 's/GRUB_CMDLINE_LINUX_RECOVERY=single/GRUB_CMDLINE_LINUX_RECOVERY=\"\$GRUB_CMDLINE_LINUX_RECOVERY single\"/' /etc/grub.d/10_linux
perl -pi -e 's/GRUB_CMDLINE_LINUX_DEFAULT \\/GRUB_CMDLINE_LINUX_DEFAULT \\\n  GRUB_CMDLINE_LINUX_RECOVERY \\/' /usr/sbin/grub-mkconfig

update-grub
